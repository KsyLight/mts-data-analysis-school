networks:
  ml-scorer:
    driver: bridge

volumes:
  postgres_data:

services:
  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    networks: [ml-scorer]
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc 127.0.0.1 2181 | grep imok"]
      interval: 10s
      retries: 5

  # Kafka-брокер
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    networks: [ml-scorer]
    depends_on: [zookeeper]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 5s
      timeout: 10s
      retries: 10

  # Ждёт готовности брокера и создаёт топики
  # Скрипт, который один раз запустится, дождётся Kafka и создаст топики
  kafka-setup:
    image: confluentinc/cp-kafka:7.3.0
    networks: [ml-scorer]
    depends_on: [kafka]
    restart: "no"   # один запуск
    command:
      - bash
      - -c
      - |
        echo "Waiting for Kafka…"
        while ! kafka-topics --bootstrap-server kafka:9092 --list >/dev/null 2>&1; do
          sleep 1
        done

        echo "Creating topics…"
        kafka-topics --bootstrap-server kafka:9092 \
          --create --if-not-exists --topic transactions \
          --partitions 3 --replication-factor 1 \
          --config retention.ms=604800000

        kafka-topics --bootstrap-server kafka:9092 \
          --create --if-not-exists --topic scores \
          --partitions 3 --replication-factor 1 \
          --config retention.ms=604800000

        echo "Done. Topics:" && kafka-topics --bootstrap-server kafka:9092 --list

  # UI для Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    networks: [ml-scorer]
    depends_on: [kafka]
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  # Сервис скоринга
  fraud_detector:
    build:
      context: ./fraud_detector
    networks: [ml-scorer]
    depends_on: [kafka-setup]
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TRANSACTIONS_TOPIC: transactions
      KAFKA_SCORING_TOPIC: scores

  # Postgres
  postgres:
    image: postgres:15
    networks: [ml-scorer]
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: transactions
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  # Пишем скоры в БД
  writer:
    build:
      context: ./writer_service
    networks: [ml-scorer]
    depends_on: [kafka-setup, postgres]
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      INPUT_TOPIC: scores
      POSTGRES_DSN: postgresql://postgres:postgres@postgres:5432/transactions

  # Streamlit-интерфейс
  ui:
    build:
      context: ./interface
    networks: [ml-scorer]
    depends_on: [writer]
    ports:
      - "8501:8501"
    environment:
      POSTGRES_DSN: postgresql://postgres:postgres@postgres:5432/transactions